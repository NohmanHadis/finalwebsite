[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "On this about page, you might want to add more information about yourself, the project, or course. Any helpful context could go here!\nMy name is Nick Hand, the instructor for the course. You can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2023.\nAdipisicing proident minim non non dolor quis. Pariatur in ipsum aliquip magna. Qui ad aliqua nulla excepteur dolor nostrud quis nisi. Occaecat proident eiusmod in cupidatat. Elit qui laboris sit aliquip proident dolore. Officia commodo commodo in eiusmod aliqua sint cupidatat consectetur aliqua sint reprehenderit.\nOccaecat incididunt esse et elit adipisicing sit est cupidatat consequat. Incididunt exercitation amet dolor non sit anim veniam veniam sint velit. Labore irure reprehenderit ut esse. Minim quis commodo nisi voluptate."
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/Python_Final.html",
    "href": "analysis/Python_Final.html",
    "title": "0. Importing Packages",
    "section": "",
    "text": "import altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport pandas as pd\nfrom osgeo import gdal as gd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\npd.set_option('display.max_columns', 500)"
  },
  {
    "objectID": "analysis/Python_Final.html#introduction",
    "href": "analysis/Python_Final.html#introduction",
    "title": "0. Importing Packages",
    "section": "1. Introduction",
    "text": "1. Introduction\nIn this project, we will use a data set on AirBnB listings in Amsterdam to predict listing prices. The challenge lies in the fact that the dataset only includes a limited number of proven housing price predictors. We try to make up for this fact by engineering interesting features, but donâ€™t import other data sources."
  },
  {
    "objectID": "analysis/Python_Final.html#data-import-and-wrangling",
    "href": "analysis/Python_Final.html#data-import-and-wrangling",
    "title": "0. Importing Packages",
    "section": "2. Data Import and Wrangling",
    "text": "2. Data Import and Wrangling\nIn this section, we import our main data set, listings, that contains approximately 20.000 rows of AirBnB listing data. We then import reviews on each listing as well as the shapefile for Amsterdam, and join all of them together.\n\n# Importing Data\nnhoods = gpd.read_file(\"data/neighbourhoods.geojson\")\nlistings = pd.read_csv(\"data/listings_py.csv\")\nlistings_detail = pd.read_csv(\"data/listings_details_py.csv\")\nreviews = pd.read_csv(\"data/reviews_details.csv\")\n\n/var/folders/lk/32gs42ns5pg1sx_wsf080w080000gn/T/ipykernel_8301/383804691.py:4: DtypeWarning: Columns (87) have mixed types. Specify dtype option on import or set low_memory=False.\n  listings_detail = pd.read_csv(\"data/listings_details_py.csv\")\n\n\n\n# Removing outliers\nlistings = listings[(listings[\"price\"] &lt; 800) & (listings[\"price\"] &gt; 0)]\n\n\n# Merging all listing data\nlistings = pd.merge(listings, listings_detail, on = \"id\", how = \"left\", suffixes = (\"\",\"_y\"))\nlistings = listings.loc[:, ~listings.columns.str.contains(\"_y\")]\n\n# Converting listings into GeoDataFrame\nlistings = gpd.GeoDataFrame(listings, geometry =  gpd.points_from_xy(listings.longitude, listings.latitude)).set_crs(nhoods.crs, allow_override = True)\n\nlistings.head(1)\n\n\n\n\n\n\n\n\nid\nname\nhost_id\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\nlisting_url\nscrape_id\nlast_scraped\nsummary\nspace\ndescription\nexperiences_offered\nneighborhood_overview\nnotes\ntransit\naccess\ninteraction\nhouse_rules\nthumbnail_url\nmedium_url\npicture_url\nxl_picture_url\nhost_url\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nstreet\nneighbourhood_cleansed\nneighbourhood_group_cleansed\ncity\nstate\nzipcode\nmarket\nsmart_location\ncountry_code\ncountry\nis_location_exact\nproperty_type\naccommodates\nbathrooms\nbedrooms\nbeds\nbed_type\namenities\nsquare_feet\nweekly_price\nmonthly_price\nsecurity_deposit\ncleaning_fee\nguests_included\nextra_people\nmaximum_nights\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\ncalendar_last_scraped\nfirst_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nrequires_license\nlicense\njurisdiction_names\ninstant_bookable\nis_business_travel_ready\ncancellation_policy\nrequire_guest_profile_picture\nrequire_guest_phone_verification\ngeometry\n\n\n\n\n0\n2818\nQuiet Garden View Room & Super Fast WiFi\n3159\nDaniel\nNaN\nOostelijk Havengebied - Indische Buurt\n52.365755\n4.941419\nPrivate room\n59\n3\n248\n2018-11-28\n2.1\n1\n44\nhttps://www.airbnb.com/rooms/2818\n20181206172549\n2018-12-06\nQuiet Garden View Room & Super Fast WiFi\nI'm renting a bedroom (room overlooking the ga...\nQuiet Garden View Room & Super Fast WiFi I'm r...\nnone\nIndische Buurt (\"Indies Neighborhood\") is a ne...\nFrom week 38 to week 47 maintenance work to th...\nThe neighbourhood is well served by 24 hours p...\nNaN\nNaN\nPlease: - Leave your shoes in the entrance - ...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/10272854/8...\nNaN\nhttps://www.airbnb.com/users/show/3159\n2008-09-24\nAmsterdam, Noord-Holland, The Netherlands\nUpon arriving in Amsterdam, one can imagine as...\nwithin an hour\n100%\nNaN\nt\nhttps://a0.muscache.com/im/users/3159/profile_...\nhttps://a0.muscache.com/im/users/3159/profile_...\nIndische Buurt\n1.0\n1.0\n['email', 'phone', 'reviews', 'jumio', 'offlin...\nt\nf\nAmsterdam, North Holland, Netherlands\nOostelijk Havengebied - Indische Buurt\nNaN\nAmsterdam\nNorth Holland\nNaN\nAmsterdam\nAmsterdam, Netherlands\nNL\nNetherlands\nf\nApartment\n2\n1.5\n1.0\n2.0\nReal Bed\n{Internet,Wifi,\"Paid parking off premises\",\"Bu...\nNaN\nNaN\n$1,500.00\n$100.00\n$50.00\n1\n$20.00\n15\ntoday\nt\n17\n44\n44\n2018-12-06\n2009-03-30\n97.0\n10.0\n10.0\n10.0\n10.0\n9.0\n10.0\nf\nNaN\n{Amsterdam}\nt\nf\nstrict_14_with_grace_period\nf\nf\nPOINT (4.94142 52.36575)\n\n\n\n\n\n\n\n\n# Spatially joining neighbourhood to each listing\nnhoods = nhoods.rename(columns = {\"neighbourhood\": \"nhood\"})[[\"nhood\", \"geometry\"]]\nlistings = gpd.sjoin(listings, nhoods, predicate = \"within\", how = \"left\")\n\nlistings.head(1)\n\n\n\n\n\n\n\n\nid\nname\nhost_id\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\nlisting_url\nscrape_id\nlast_scraped\nsummary\nspace\ndescription\nexperiences_offered\nneighborhood_overview\nnotes\ntransit\naccess\ninteraction\nhouse_rules\nthumbnail_url\nmedium_url\npicture_url\nxl_picture_url\nhost_url\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nstreet\nneighbourhood_cleansed\nneighbourhood_group_cleansed\ncity\nstate\nzipcode\nmarket\nsmart_location\ncountry_code\ncountry\nis_location_exact\nproperty_type\naccommodates\nbathrooms\nbedrooms\nbeds\nbed_type\namenities\nsquare_feet\nweekly_price\nmonthly_price\nsecurity_deposit\ncleaning_fee\nguests_included\nextra_people\nmaximum_nights\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\ncalendar_last_scraped\nfirst_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nrequires_license\nlicense\njurisdiction_names\ninstant_bookable\nis_business_travel_ready\ncancellation_policy\nrequire_guest_profile_picture\nrequire_guest_phone_verification\ngeometry\nindex_right\nnhood\n\n\n\n\n0\n2818\nQuiet Garden View Room & Super Fast WiFi\n3159\nDaniel\nNaN\nOostelijk Havengebied - Indische Buurt\n52.365755\n4.941419\nPrivate room\n59\n3\n248\n2018-11-28\n2.1\n1\n44\nhttps://www.airbnb.com/rooms/2818\n20181206172549\n2018-12-06\nQuiet Garden View Room & Super Fast WiFi\nI'm renting a bedroom (room overlooking the ga...\nQuiet Garden View Room & Super Fast WiFi I'm r...\nnone\nIndische Buurt (\"Indies Neighborhood\") is a ne...\nFrom week 38 to week 47 maintenance work to th...\nThe neighbourhood is well served by 24 hours p...\nNaN\nNaN\nPlease: - Leave your shoes in the entrance - ...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/10272854/8...\nNaN\nhttps://www.airbnb.com/users/show/3159\n2008-09-24\nAmsterdam, Noord-Holland, The Netherlands\nUpon arriving in Amsterdam, one can imagine as...\nwithin an hour\n100%\nNaN\nt\nhttps://a0.muscache.com/im/users/3159/profile_...\nhttps://a0.muscache.com/im/users/3159/profile_...\nIndische Buurt\n1.0\n1.0\n['email', 'phone', 'reviews', 'jumio', 'offlin...\nt\nf\nAmsterdam, North Holland, Netherlands\nOostelijk Havengebied - Indische Buurt\nNaN\nAmsterdam\nNorth Holland\nNaN\nAmsterdam\nAmsterdam, Netherlands\nNL\nNetherlands\nf\nApartment\n2\n1.5\n1.0\n2.0\nReal Bed\n{Internet,Wifi,\"Paid parking off premises\",\"Bu...\nNaN\nNaN\n$1,500.00\n$100.00\n$50.00\n1\n$20.00\n15\ntoday\nt\n17\n44\n44\n2018-12-06\n2009-03-30\n97.0\n10.0\n10.0\n10.0\n10.0\n9.0\n10.0\nf\nNaN\n{Amsterdam}\nt\nf\nstrict_14_with_grace_period\nf\nf\nPOINT (4.94142 52.36575)\n6.0\nOostelijk Havengebied - Indische Buurt"
  },
  {
    "objectID": "analysis/Python_Final.html#feature-engineering",
    "href": "analysis/Python_Final.html#feature-engineering",
    "title": "0. Importing Packages",
    "section": "3 Feature Engineering",
    "text": "3 Feature Engineering\nIn this section, we take the most promising varibales in our data set and visualize them to find strong correlations. We can then feed these correlations into the regression model and hope that they explain a good chunnk of the variance. Next to taking classical housing price predictors such as the number of bed and bathrooms, we also engineer some features.\n\n### 3.1 Price Distribution\na1 = plt.subplots()\nplt.hist(listings[\"price\"], bins = 25, density = False)\nplt.xlabel(\"Price in USD\")\nplt.ylabel(\"Count\")\nplt.title(\"Histrogram of Price Frequency Distribution\")\nplt.grid(False)\nplt.xlim(0, 800)\n\nplt.show()\n\n\n\n\nWhen visualizing the daily price, we see a right-skew. Since our model will employ OLS regression, normalized variables are preferred since they can increase the performance and significance of the model.\nWe hence continue to log transform our dependent variable\n\n# Avoiding inf values\nlistings[\"price\" == 0] = 1e-5\n\nlistings[\"price\"] = np.log(listings[\"price\"])\n\nThe log transformed daily price shows an approximate normal distribution and will therefore be used as dependent variable for the regression model.\n\n### 3.1 Price Distribution\na1 = plt.subplots()\nplt.hist(listings[\"price\"], bins = 15, density = False)\nplt.xlabel(\"Price in USD\")\nplt.ylabel(\"Count\")\nplt.title(\"Histrogram of Price Frequency Distribution\")\nplt.grid(False)\nplt.xlim(0, 7)\n\nplt.show()\n\n\n\n\n\n3.2 Spatial Distribution of Price\n\nlistings_prices = listings[[\"nhood\",\"price\"]].groupby(\"nhood\").mean(\"price\").reset_index()\nlistings_prices.head(1)\n\n\n\n\n\n\n\n\nnhood\nprice\n\n\n\n\n0\nBijlmer-Centrum\n4.35539\n\n\n\n\n\n\n\n\n# Spatially joining neighbourhood to each listing\nmap_prices = pd.merge(nhoods, listings_prices, on = \"nhood\", how = \"inner\")\n\nmap_prices.head(1)\n\n\n\n\n\n\n\n\nnhood\ngeometry\nprice\n\n\n\n\n0\nBijlmer-Oost\nMULTIPOLYGON Z (((4.99167 52.32444 0.00000, 4....\n4.403268\n\n\n\n\n\n\n\n\nmap_prices.hvplot(\n    crs = nhoods.crs,\n    geo = True,\n    frame_width = 500,\n    frame_height = 500,\n    cmap = \"viridis\",\n    c = \"price\",\n    dynamic = False\n)\n\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n\n\n\n\n\n\n  \n\n\n\n\nWe see that prices at the center are highest, and that they decrease as distance to center decreases. However, they donâ€™t decrease drastically. This might lead us to believe that the daily rates are rather evenly distributed with low variance.\n\nlistings[\"price\"].mean()\n\n4.86960988521158\n\n\n\nlistings[\"price\"].std()\n\n0.4873054417608917\n\n\nHowever, a standard deviation of 0.5 given a mean of 4.9 tells us that there is quite some variation in price. In fact, the one standard deviation interval ranges from 80\\(-221\\). There is one likely explanation for this finding given that our map looks so homogenously distributed: When visualizing the map, we took the mean of all listing prices per tract. However, there could be significant variance in the listing prices within each tract. If this is true, this would also imply that there might me rather little spatial process in the city. This makes sense since European cities in general are no as segregated (there was never redlining).\nAnother possible implication is that internal features of the house, such as furniture, heating system, amenities like pools, or average square feet of houses differ significantly. This, on the other hand, implies that using only the features in the data set will likely result in a weak regression model, because we merely have any information on all these factors.\nWe will now calculate the one standard deviation range for each neighborhood.\n\nstd_nhood = listings.groupby(\"nhood\").agg(np.std, ddof = 0).rename(columns = {\"price\" : \"std_price\"})[\"std_price\"]\nmean_nhood = listings.groupby(\"nhood\").mean(\"price\")[\"price\"]\n\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n/Users/nohman/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3603: FutureWarning: The default value of numeric_only in GeoDataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n\n\n\nstd_nhood = std_nhood.to_frame().reset_index()\nmean_nhood = mean_nhood.to_frame().reset_index()\n\n\nconcatted = pd.concat([std_nhood, mean_nhood], axis = 1)[[\"nhood\", \"std_price\", \"price\"]]\nconcatted[\"low\"] = np.exp(concatted[\"price\"] - concatted[\"std_price\"])\nconcatted[\"high\"] = np.exp(concatted[\"price\"] + concatted[\"std_price\"])\nconcatted.head(21)\n\n\n\n\n\n\n\n\n\nnhood\nnhood\nstd_price\nprice\nlow\nhigh\n\n\n\n\n0\nBijlmer-Centrum\nBijlmer-Centrum\n0.519000\n4.355390\n46.357830\n130.894243\n\n\n1\nBijlmer-Oost\nBijlmer-Oost\n0.610778\n4.403268\n44.366742\n150.512379\n\n\n2\nBos en Lommer\nBos en Lommer\n0.401156\n4.673648\n71.700095\n159.940760\n\n\n3\nBuitenveldert - Zuidas\nBuitenveldert - Zuidas\n0.514958\n4.811480\n73.443911\n205.704019\n\n\n4\nCentrum-Oost\nCentrum-Oost\n0.500947\n5.069800\n96.433475\n262.630281\n\n\n5\nCentrum-West\nCentrum-West\n0.487176\n5.085596\n99.327225\n263.162690\n\n\n6\nDe Aker - Nieuw Sloten\nDe Aker - Nieuw Sloten\n0.559780\n4.669417\n60.924574\n186.642906\n\n\n7\nDe Baarsjes - Oud-West\nDe Baarsjes - Oud-West\n0.433552\n4.853467\n83.089232\n197.753176\n\n\n8\nDe Pijp - Rivierenbuurt\nDe Pijp - Rivierenbuurt\n0.454975\n4.916452\n86.615382\n215.169627\n\n\n9\nGaasperdam - Driemond\nGaasperdam - Driemond\n0.518131\n4.383336\n47.713028\n134.486927\n\n\n10\nGeuzenveld - Slotermeer\nGeuzenveld - Slotermeer\n0.541544\n4.604396\n58.139861\n171.732876\n\n\n11\nIJburg - Zeeburgereiland\nIJburg - Zeeburgereiland\n0.547208\n4.897123\n77.471914\n231.442291\n\n\n12\nNoord-Oost\nNoord-Oost\n0.502316\n4.650378\n63.311218\n172.896617\n\n\n13\nNoord-West\nNoord-West\n0.478332\n4.656240\n65.229253\n169.791499\n\n\n14\nOostelijk Havengebied - Indische Buurt\nOostelijk Havengebied - Indische Buurt\n0.438628\n4.733891\n73.351526\n176.358523\n\n\n15\nOsdorp\nOsdorp\n0.494912\n4.460248\n52.737984\n141.905249\n\n\n16\nOud-Noord\nOud-Noord\n0.532274\n4.830588\n73.575627\n213.334480\n\n\n17\nOud-Oost\nOud-Oost\n0.398111\n4.836936\n84.675423\n187.737827\n\n\n18\nSlotervaart\nSlotervaart\n0.501040\n4.616122\n61.257228\n166.861067\n\n\n19\nWatergraafsmeer\nWatergraafsmeer\n0.475840\n4.800726\n75.556904\n195.696620\n\n\n20\nWesterpark\nWesterpark\n0.398878\n4.851002\n85.809060\n190.543375\n\n\n\n\n\n\n\nIndeed, the above data frame shows the one standard deviation range for each neighborhood, and we see significant ranges for nearly all of them. Now, it could be argued that these differences could be due to features such as apartment or property type with the logic that a one room rental in a shared flat will cost significantly less than an entire apartment in any neighborhood. If this is the main driver behind these differences, our independent variable property type and room type should explain most of the variance in here. We will later see that this is not the case.\n\n\n3.1 Sentiment Analysis of Reviews\nAs we are limited in the number of features we can use by the data frame, we decided to conduct a sentiment analysis taking the top 5 reviews for each listing. We then convert these into a score.\n\n# Converting column type to string\nreviews = reviews[reviews[\"comments\"].notna()]\n\nreviews[\"comments\"] = reviews[\"comments\"].astype(str)\nreviews.head(1)\n\n\n\n\n\n\n\n\nlisting_id\nid\ndate\nreviewer_id\nreviewer_name\ncomments\n\n\n\n\n0\n2818\n1191\n2009-03-30\n10952\nLam\nDaniel is really cool. The place was nice and ...\n\n\n\n\n\n\n\n\n# Selecting the first five comments for each listing\nreviews = reviews.groupby(\"listing_id\").head(5)\n\nreviews.head(1)\n\n\n\n\n\n\n\n\nlisting_id\nid\ndate\nreviewer_id\nreviewer_name\ncomments\n\n\n\n\n0\n2818\n1191\n2009-03-30\n10952\nLam\nDaniel is really cool. The place was nice and ...\n\n\n\n\n\n\n\n\n# Trimming the comments\nreviews_trim = reviews.loc[reviews[\"comments\"] != \"\"]\ndescriptions = reviews_trim[\"comments\"].str.strip().tolist()\n\n\n# Setting up pipieline for sentiment analysis\nfrom transformers import pipeline\n\nmodel = \"bhadresh-savani/distilbert-base-uncased-emotion\"\n\nemotion_classifier = pipeline(\n    task = \"text-classification\", \n    model = model, \n    top_k = None,  \n    tokenizer = model,  \n    truncation = True,  \n)\n\nXformers is not installed correctly. If you want to use memory_efficient_attention to accelerate training use the following command to install Xformers\npip install xformers.\n\n\n\nemotion_scores = emotion_classifier(descriptions)\n\n\n# Defining sentiments and adding prediction to data frame\nemotion = pd.DataFrame(\n    [{d[\"label\"]: d[\"score\"] for d in dd} for dd in emotion_scores]).assign(text = descriptions)\n\nemotion_labels = [\"anger\", \"fear\", \"sadness\", \"joy\", \"surprise\", \"love\"]\n\nemotion[emotion_labels].idxmax(axis=1)\n\nemotion['prediction'] = emotion[emotion_labels].idxmax(axis=1)\n\n\nreviews_trim = reviews_trim.reset_index()\n\n\nemotion.groupby(\"prediction\").size().plot(kind='barh');\n\n\n\n\nWe observe that the vast majority of predictions is joy meaning that most people were happy with their booking. This means that if we construct an equally weighted score for each emotion, we canâ€™t really discriminate listings. We therefore choose a weighting that severely punishes a bad review. We do this by awarding 1 score point for a positive review, and -10 for a negative one.\n\n# Adding results back to original data frame\ndata_conc = pd.concat([reviews_trim, emotion], axis = 1)\ndata_conc.head(1)\n\n\n\n\n\n\n\n\nindex\nlisting_id\nid\ndate\nreviewer_id\nreviewer_name\ncomments\njoy\nsadness\nanger\nfear\nlove\nsurprise\ntext\nprediction\n\n\n\n\n0\n0\n2818\n1191\n2009-03-30\n10952\nLam\nDaniel is really cool. The place was nice and ...\n0.611862\n0.337563\n0.0334\n0.011916\n0.004273\n0.000986\nDaniel is really cool. The place was nice and ...\njoy\n\n\n\n\n\n\n\n\n# Defining a scoring system for each emotion\ndef scoring_system(prediction):\n  if prediction in [\"joy\", \"love\"]:\n    return 1\n  else:\n    return -10\n\ndata_conc[\"score\"] = data_conc[\"prediction\"].apply(scoring_system)\n\ndata_conc.head(1)\n\n\n\n\n\n\n\n\nindex\nlisting_id\nid\ndate\nreviewer_id\nreviewer_name\ncomments\njoy\nsadness\nanger\nfear\nlove\nsurprise\ntext\nprediction\nscore\n\n\n\n\n0\n0\n2818\n1191\n2009-03-30\n10952\nLam\nDaniel is really cool. The place was nice and ...\n0.611862\n0.337563\n0.0334\n0.011916\n0.004273\n0.000986\nDaniel is really cool. The place was nice and ...\njoy\n1\n\n\n\n\n\n\n\n\n# Calculating sentinment score for each listing\ndata_conc = data_conc.groupby(\"listing_id\").mean(\"score\").reset_index()\ndata_conc.head(1)\n\n\n\n\n\n\n\n\nlisting_id\nindex\nid\nreviewer_id\njoy\nsadness\nanger\nfear\nlove\nsurprise\nscore\n\n\n\n\n0\n2818\n2.0\n2179.8\n13532.0\n0.919928\n0.067708\n0.006881\n0.002481\n0.002663\n0.000339\n1.0\n\n\n\n\n\n\n\n\nlistings = listings.rename(columns = {\"id\":\"listing_id\"})\n\n\n# Joining all data sets together\nlistings = pd.merge(listings, data_conc, on = \"listing_id\", how = \"inner\")\nlistings.head(1)\n\n\n\n\n\n\n\n\nlisting_id\nname\nhost_id\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\nlisting_url\nscrape_id\nlast_scraped\nsummary\nspace\ndescription\nexperiences_offered\nneighborhood_overview\nnotes\ntransit\naccess\ninteraction\nhouse_rules\nthumbnail_url\nmedium_url\npicture_url\nxl_picture_url\nhost_url\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nstreet\nneighbourhood_cleansed\nneighbourhood_group_cleansed\ncity\nstate\nzipcode\nmarket\nsmart_location\ncountry_code\ncountry\nis_location_exact\nproperty_type\naccommodates\nbathrooms\nbedrooms\nbeds\nbed_type\namenities\nsquare_feet\nweekly_price\nmonthly_price\nsecurity_deposit\ncleaning_fee\nguests_included\nextra_people\nmaximum_nights\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\ncalendar_last_scraped\nfirst_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nrequires_license\nlicense\njurisdiction_names\ninstant_bookable\nis_business_travel_ready\ncancellation_policy\nrequire_guest_profile_picture\nrequire_guest_phone_verification\ngeometry\nindex_right\nnhood\nFalse\nindex\nid\nreviewer_id\njoy\nsadness\nanger\nfear\nlove\nsurprise\nscore\n\n\n\n\n0\n2818\nQuiet Garden View Room & Super Fast WiFi\n3159\nDaniel\nNaN\nOostelijk Havengebied - Indische Buurt\n52.365755\n4.941419\nPrivate room\n4.077537\n3\n248\n2018-11-28\n2.1\n1\n44\nhttps://www.airbnb.com/rooms/2818\n20181206172549\n2018-12-06\nQuiet Garden View Room & Super Fast WiFi\nI'm renting a bedroom (room overlooking the ga...\nQuiet Garden View Room & Super Fast WiFi I'm r...\nnone\nIndische Buurt (\"Indies Neighborhood\") is a ne...\nFrom week 38 to week 47 maintenance work to th...\nThe neighbourhood is well served by 24 hours p...\nNaN\nNaN\nPlease: - Leave your shoes in the entrance - ...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/10272854/8...\nNaN\nhttps://www.airbnb.com/users/show/3159\n2008-09-24\nAmsterdam, Noord-Holland, The Netherlands\nUpon arriving in Amsterdam, one can imagine as...\nwithin an hour\n100%\nNaN\nt\nhttps://a0.muscache.com/im/users/3159/profile_...\nhttps://a0.muscache.com/im/users/3159/profile_...\nIndische Buurt\n1.0\n1.0\n['email', 'phone', 'reviews', 'jumio', 'offlin...\nt\nf\nAmsterdam, North Holland, Netherlands\nOostelijk Havengebied - Indische Buurt\nNaN\nAmsterdam\nNorth Holland\nNaN\nAmsterdam\nAmsterdam, Netherlands\nNL\nNetherlands\nf\nApartment\n2\n1.5\n1.0\n2.0\nReal Bed\n{Internet,Wifi,\"Paid parking off premises\",\"Bu...\nNaN\nNaN\n$1,500.00\n$100.00\n$50.00\n1\n$20.00\n15\ntoday\nt\n17\n44\n44\n2018-12-06\n2009-03-30\n97.0\n10.0\n10.0\n10.0\n10.0\n9.0\n10.0\nf\nNaN\n{Amsterdam}\nt\nf\nstrict_14_with_grace_period\nf\nf\nPOINT (4.94142 52.36575)\n6.0\nOostelijk Havengebied - Indische Buurt\n0.00001\n2.0\n2179.8\n13532.0\n0.919928\n0.067708\n0.006881\n0.002481\n0.002663\n0.000339\n1.0\n\n\n\n\n\n\n\n\nplt.figure(figsize = (12, 6))\nsns.lineplot(data = listings, x = \"score\", y = \"price\")\n\nplt.title(\"Listing Price vs Review Sentiment Score\")\nplt.xlabel(\"Review Sentiment Score\")\nplt.ylabel(\"Daily Price in USD\")\nplt.grid(False)\nplt.show()\n\n\n\n\n\n\n3.2 Price vs Number of Reviews\nThe idea behind the number of reviews is that cheap apartments are likely to be much more frequently booked than non-cheap apartments, implying that there should be a steep negative correlation. When we visualize this, we clearly see that the number of reviews can be a good predictor for our model.\n\nlistings_plt = pd.read_csv(\"data/listings_py.csv\")\n\n\nlistings_plt = listings_plt[[\"price\", \"reviews_per_month\"]]\nlistings_plt.head(1)\n\n\n\n\n\n\n\n\nprice\nreviews_per_month\n\n\n\n\n0\n59\n2.1\n\n\n\n\n\n\n\n\nx = listings_plt[\"price\"]\ny = listings_plt[\"reviews_per_month\"]\n\n\nfig, ax = plt.subplots()\n\nx = x \ny = y \nax.scatter(x, y, c='pink')\nax.set_title('Amsterdam AirBnBs: Daily Price vs No. of Monthly Reviews')\nax.set_xlabel('Daily Price in USD')\nax.set_ylabel('No. of Monthly Reviews')\nplt.ylim(0,14)\nplt.yticks(range(0,15))\nplt.xlim(0,800)\nplt.show()\n\n\n\n\n\n\n3.3 Price vs Number of Included Guests\nSince our data set lacks the most important predictor, the square feet size of each listing, we have to use proxies for that. The number of guests included could be an approximation to size. The caveat here is that property owners are incentivized to bloat this number if they want their listing to be more attractive. What this means is that it could for example be that the owner of a two bedroom apartment includes in his listing that 5 guests are included.\nEven though we have this caveat, we still see a strong correlation between the daily price and the number of guests included.\n\nlistings_sbn = listings.groupby(\"guests_included\").mean(\"price\").reset_index()[[\"guests_included\", \"price\"]]\nlistings_sbn.head(1)\n\n\n\n\n\n\n\n\nguests_included\nprice\n\n\n\n\n0\n1\n4.304118\n\n\n\n\n\n\n\n\nplt.figure(figsize = (12, 6))\nsns.lineplot(data = listings_sbn, x = \"guests_included\", y = \"price\")\n\nplt.title(\"Price vs Guests Included\")\nplt.xlabel(\"No. of Guests Included\")\nplt.ylabel(\"Daily Price in USD\")\nplt.grid(False)\nplt.show()\n\n\n\n\n\n\n3.4 Price vs Number of Bathrooms\nAnother proxy for size is the number of bathrooms and the number of bedrooms. Both correlate well with the daily price. We have a few outliers in the number of bathrooms which could be typos by the property owners. We remove these.\n\nlistings_alt_1 = listings.groupby(\"bathrooms\").mean(\"price\").reset_index()[[\"bathrooms\", \"price\"]]\nlistings_alt_1.head(1)\n\n\n\n\n\n\n\n\nbathrooms\nprice\n\n\n\n\n0\n0.0\n4.0\n\n\n\n\n\n\n\n\nalt.Chart(listings_alt_1).mark_point().encode(x =alt.X(\"bathrooms\", title = \"No. of Bathrooms\", scale = alt.Scale(domain = [0,15])), y = alt.Y(\"price\", title = \"Daily Price in USD\")).properties(\n    width = 300,\n    height = 300,\n    title = \"Number of Bathrooms vs Daily Price\",\n)\n\n\n\n\n\n\n\n\n\n\n3.5 Price vs Number of Bedrooms\n\nlistings_alt_2 = listings.groupby(\"beds\").mean(\"price\").reset_index()[[\"beds\", \"price\"]]\nlistings_alt_2 = listings_alt_2[(listings_alt_2[\"price\"] &lt; 700) & (listings_alt_2[\"beds\"] &lt; 14)]\n\n\nalt.Chart(listings_alt_2).mark_point().encode(x =alt.X(\"beds\", title = \"No. of Beds\", scale = alt.Scale(domain = [0,15])), y = alt.Y(\"price\", title = \"Daily Price in USD\")).properties(\n    width = 300,\n    height = 300,\n    title = \"Number of Beds vs Daily Price\",\n)\n\n\n\n\n\n\n\n\nlistings = listings[listings[\"bathrooms\"] &lt; 6]\n\n\n\n3.6 Price vs Property Type\nWe mentioned in the beginning that the high variance in the within tract listing prices could be due to big differences in property types. The below table gives us some hope as we indeed see significant price differences by property type. However, the count also shows that these only make up a fraction of the listings. What this means is that there are likely other internal features than property type that drive the price, or, severe clustering of high value vs low value listings within neighborhoods.\n\nprop_type = listings.groupby(\"property_type\").agg({\"price\" :\"mean\", \"id\":\"count\"}).rename(columns = {\"id\" : \"count\"}).reset_index()\nprop_type = prop_type.sort_values(ascending = False, by = \"price\")\nprop_type.head(20)\n\n\n\n\n\n\n\n\nproperty_type\nprice\ncount\n\n\n\n\n0\nAparthotel\n5.426766\n3\n\n\n24\nServiced apartment\n5.325990\n53\n\n\n27\nVilla\n5.217532\n28\n\n\n18\nHotel\n5.172728\n6\n\n\n20\nHouseboat\n5.152728\n204\n\n\n21\nLoft\n5.136587\n353\n\n\n4\nBoat\n5.084830\n344\n\n\n26\nTownhouse\n5.036800\n565\n\n\n10\nCastle\n5.010635\n1\n\n\n2\nBarn\n4.963882\n4\n\n\n22\nNature lodge\n4.941642\n1\n\n\n19\nHouse\n4.925469\n1262\n\n\n1\nApartment\n4.837432\n13731\n\n\n12\nCondominium\n4.818005\n296\n\n\n5\nBoutique hotel\n4.807235\n26\n\n\n6\nBungalow\n4.769024\n10\n\n\n3\nBed and breakfast\n4.706337\n406\n\n\n17\nHostel\n4.702416\n3\n\n\n13\nCottage\n4.693835\n11\n\n\n7\nCabin\n4.692565\n12\n\n\n\n\n\n\n\n\n\n3.7 K-Nearest Listings\nThe lagged price will include a spatial process into our regression. From the discussions above, we donâ€™t expect it to be too large, except for there is great within neighborhood clustering of high vs low value listings. Indeed, we see a positive relationship between the price and the lagged price. The points huge the regression line, which generally is a good sign, but in our case, the variance is extremely big. This can have two reasons: First, there is great clustering of high and low house values within neighborhoods and when taking the k nearest, many of the nearest neighbors might be low value listings while some other are high value listings. Another reason could be that internal house prices rather than spatial features explain the price.\nWe shall therefore wait for the feature importances to make a judgement on this finding.\n\n# Get the X/Y\n# Neighbors\nfrom sklearn.neighbors import NearestNeighbors\n\ndef get_xy_from_geometry(df):\n    \"\"\"\n    Return a numpy array with two columns, where the \n    first holds the `x` geometry coordinate and the second \n    column holds the `y` geometry coordinate\n    \n    Note: this works with both Point() and Polygon() objects.\n    \"\"\"\n    # NEW: use the centroid.x and centroid.y to support Polygon() and Point() geometries \n    x = df.geometry.centroid.x\n    y = df.geometry.centroid.y\n    \n    return np.column_stack((x, y)) # stack as columns\n\nlistingsXY = get_xy_from_geometry(listings.to_crs(nhoods.crs))\n\n# Run the k nearest algorithm on data set itself\nnbrs = NearestNeighbors(n_neighbors = 6)\nnbrs.fit(listingsXY)\n\ndistances, indices = nbrs.kneighbors(listingsXY)\n\n/var/folders/lk/32gs42ns5pg1sx_wsf080w080000gn/T/ipykernel_8301/1336528089.py:14: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  x = df.geometry.centroid.x\n/var/folders/lk/32gs42ns5pg1sx_wsf080w080000gn/T/ipykernel_8301/1336528089.py:15: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  y = df.geometry.centroid.y\n\n\n\n# the total trips for the stations from original data frame\nlistings_price = listings[\"price\"].values\n\n\nlistings_price\n\narray([4.07753744, 5.07517382, 4.38202663, ..., 3.68887945, 5.35658627,\n       3.68887945])\n\n\n\n# get the trips for the 5 nearest neighbors (ignoring first match)\nneighboring_listings = listings_price[indices[:, 1:]]\n\n\nneighboring_listings\n\narray([[4.38202663, 4.31748811, 4.07753744, 5.01063529, 6.08677473],\n       [5.27299956, 4.70048037, 4.77068462, 4.49980967, 4.69134788],\n       [5.01063529, 5.39362755, 4.94164242, 4.17438727, 4.94164242],\n       ...,\n       [5.01063529, 4.69134788, 4.90527478, 4.48863637, 4.09434456],\n       [5.47227067, 5.01063529, 5.70378247, 6.2126061 , 5.52146092],\n       [5.18738581, 4.47733681, 4.60517019, 4.97673374, 4.58496748]])\n\n\n\n# Add to features\nlistings[\"lagged_price\"] = neighboring_listings.mean(axis = 1)\n\n\nsns.regplot(x = listings[\"lagged_price\"], y = listings[\"price\"]);"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. Itâ€™s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, youâ€™re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. Itâ€™s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, youâ€™re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "MUSA 550 Final Project Template",
    "section": "Find out more",
    "text": "Find out more\nThe code for this repository is hosted on our courseâ€™s GitHub page: https://github.com/MUSA-550-Fall-2023/quarto-website-template.\nWe covered the basics of getting started with Quarto and GitHub Pages in week 9. Take a look at the slides for lecture 9A to find out more."
  }
]